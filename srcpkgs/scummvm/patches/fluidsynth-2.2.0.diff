--- audio/softsynth/fluidsynth.cpp
+++ audio/softsynth/fluidsynth.cpp
@@ -144,11 +144,11 @@
 	return p;
 }
 
-static int SoundFontMemLoader_read(void *buf, int count, void *handle) {
+static int SoundFontMemLoader_read(void *buf, fluid_long_long_t count, void *handle) {
 	return ((Common::SeekableReadStream *) handle)->read(buf, count) == (uint32)count ? FLUID_OK : FLUID_FAILED;
 }
 
-static int SoundFontMemLoader_seek(void *handle, long offset, int origin) {
+static int SoundFontMemLoader_seek(void *handle, fluid_long_long_t offset, int origin) {
 	return ((Common::SeekableReadStream *) handle)->seek(offset, origin) ? FLUID_OK : FLUID_FAILED;
 }
 
@@ -157,7 +157,7 @@
 	return FLUID_OK;
 }
 
-static long SoundFontMemLoader_tell(void *handle) {
+static fluid_long_long_t SoundFontMemLoader_tell(void *handle) {
 	return ((Common::SeekableReadStream *) handle)->pos();
 }
 #endif
@@ -195,7 +195,7 @@
 	_synth = new_fluid_synth(_settings);
 
 	if (ConfMan.getBool("fluidsynth_chorus_activate")) {
-		fluid_synth_set_chorus_on(_synth, 1);
+		fluid_synth_chorus_on(_synth, -1, 1);
 
 		int chorusNr = ConfMan.getInt("fluidsynth_chorus_nr");
 		double chorusLevel = (double)ConfMan.getInt("fluidsynth_chorus_level") / 100.0;
@@ -210,22 +210,29 @@
 			chorusType = FLUID_CHORUS_MOD_TRIANGLE;
 		}
 
-		fluid_synth_set_chorus(_synth, chorusNr, chorusLevel, chorusSpeed, chorusDepthMs, chorusType);
+		fluid_synth_set_chorus_group_nr(_synth, -1, chorusNr);
+		fluid_synth_set_chorus_group_level(_synth, -1, chorusLevel);
+		fluid_synth_set_chorus_group_speed(_synth, -1, chorusSpeed);
+		fluid_synth_set_chorus_group_depth(_synth, -1, chorusDepthMs);
+		fluid_synth_set_chorus_group_type(_synth, -1, chorusType);
 	} else {
-		fluid_synth_set_chorus_on(_synth, 0);
+		fluid_synth_chorus_on(_synth, -1, 0);
 	}
 
 	if (ConfMan.getBool("fluidsynth_reverb_activate")) {
-		fluid_synth_set_reverb_on(_synth, 1);
+		fluid_synth_reverb_on(_synth, -1, 1);
 
 		double reverbRoomSize = (double)ConfMan.getInt("fluidsynth_reverb_roomsize") / 100.0;
 		double reverbDamping = (double)ConfMan.getInt("fluidsynth_reverb_damping") / 100.0;
 		int reverbWidth = ConfMan.getInt("fluidsynth_reverb_width");
 		double reverbLevel = (double)ConfMan.getInt("fluidsynth_reverb_level") / 100.0;
 
-		fluid_synth_set_reverb(_synth, reverbRoomSize, reverbDamping, reverbWidth, reverbLevel);
+		fluid_synth_set_reverb_group_roomsize(_synth, -1, reverbRoomSize);
+		fluid_synth_set_reverb_group_damp(_synth, -1, reverbDamping);
+		fluid_synth_set_reverb_group_width(_synth, -1, reverbWidth);
+		fluid_synth_set_reverb_group_level(_synth, -1, reverbLevel);
 	} else {
-		fluid_synth_set_reverb_on(_synth, 0);
+		fluid_synth_reverb_on(_synth, -1, 0);
 	}
 
 	Common::String interpolation = ConfMan.get("fluidsynth_misc_interpolation");
